# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

default_platform(:ios)

configs = JSON.parse(File.read('./Config.json'), object_class: OpenStruct)

def file_prepend(file, str)
  new_contents = ""
  File.open(file, 'r') do |fd|
    contents = fd.read
    new_contents = str << contents
  end
  # Overwrite file but now with prepended string on it
  File.open(file, 'w') do |fd| 
    fd.write(new_contents)
  end
end

platform :ios do
  lane :metrics do
    scan(scheme: configs.project.scheme, code_coverage: true, derived_data_path: "./DerivedData", output_directory: "./reports")
    slather(cobertura_xml: true, jenkins: true, scheme: configs.project.scheme, build_directory: "./DerivedData", output_directory: "./reports", proj: "./#{configs.project.name}.xcodeproj")
    lizard(source_folder: "#{configs.project.source_folder}", language: "swift", export_type: "xml", report_file: "reports/lizard-report.xml")
    swiftlint(output_file: "./reports/swiftlint.txt", ignore_exit_status: true)
    sonar
  end

  lane :version do
    if is_ci
      sh('git', 'fetch')
      sh("git", "checkout", "main")
    end

    tag_format = '*'
    is_releasable = analyze_commits(
      match: tag_format,
      releases: {:fix=>"patch", :feat=>"minor", :hotfix=>"patch"}
    )
    
    unless is_releasable
      UI.message('Nothing to release, incrementing Build Number')
      increment_build_number
      git_commit(path: ".", message: "Build Number Bump [skip ci]")
      push_to_git_remote
      next
    end

    UI.message('A New tag can be released\n\n')

    UI.message('Resetting Build number to 1')
    increment_build_number(build_number: "1")
    
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    
    
    UI.message('Generating release notes for this version')
    notes = conventional_changelog(
      format: 'markdown',
      order: ["feat", "hotfix", "fix", "docs"]
    )
  
    tag = "#{next_version}"
    
    UI.message('Incrementing Version Number')
    increment_version_number(version_number: next_version)

    UI.message('Recording to Changelog.md')
    file_prepend('../CHANGELOG.md', notes)

    UI.message('Committing and Pushing')
    git_commit(path: ".", message: "Version Bump [skip ci]")
    push_to_git_remote
    UI.message('Adding & pushing the Git tag')
    add_git_tag(tag: tag)
    push_git_tags
  end

  lane :sync_sentry do
    if configs.sentry != nil
      gym # building your app
      sentry_upload_dsym(
        auth_token: configs.sentry,
        org_slug: 'nerdor',
        project_slug: 'nerdor',
      )
    else
      puts "Sentry was not set in the configs".red  
    end
  end
end
