//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 28 colors.
  struct color {
    /// Color `approvedStatusColor`.
    static let approvedStatusColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "approvedStatusColor")
    /// Color `cancelledStatusColor`.
    static let cancelledStatusColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "cancelledStatusColor")
    /// Color `destructionButtonsColor`.
    static let destructionButtonsColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "destructionButtonsColor")
    /// Color `pendingStatusColor`.
    static let pendingStatusColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "pendingStatusColor")
    /// Color `primaryBackgroundColor`.
    static let primaryBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryBackgroundColor")
    /// Color `primaryButtonBackgroundColor`.
    static let primaryButtonBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryButtonBackgroundColor")
    /// Color `primaryButtonIconColor`.
    static let primaryButtonIconColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryButtonIconColor")
    /// Color `primaryButtonTextColor`.
    static let primaryButtonTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryButtonTextColor")
    /// Color `primaryTextColor`.
    static let primaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryTextColor")
    /// Color `secondaryBackgroundColor`.
    static let secondaryBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryBackgroundColor")
    /// Color `secondaryButtonBackgroundColor`.
    static let secondaryButtonBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryButtonBackgroundColor")
    /// Color `secondaryButtonBorderColor`.
    static let secondaryButtonBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryButtonBorderColor")
    /// Color `secondaryButtonIconColor`.
    static let secondaryButtonIconColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryButtonIconColor")
    /// Color `secondaryButtonTextColor`.
    static let secondaryButtonTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryButtonTextColor")
    /// Color `secondaryTextColor`.
    static let secondaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryTextColor")
    /// Color `separatorColor`.
    static let separatorColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "separatorColor")
    /// Color `shadow`.
    static let shadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadow")
    /// Color `textButtonTextColor`.
    static let textButtonTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textButtonTextColor")
    /// Color `textFieldBackgroundColor`.
    static let textFieldBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldBackgroundColor")
    /// Color `textFieldBorderColor`.
    static let textFieldBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldBorderColor")
    /// Color `textFieldErrorBorderColor`.
    static let textFieldErrorBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldErrorBorderColor")
    /// Color `textFieldErrorHintColor`.
    static let textFieldErrorHintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldErrorHintColor")
    /// Color `textFieldErrorIconColor`.
    static let textFieldErrorIconColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldErrorIconColor")
    /// Color `textFieldErrorTextColor`.
    static let textFieldErrorTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldErrorTextColor")
    /// Color `textFieldHintColor`.
    static let textFieldHintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldHintColor")
    /// Color `textFieldPlaceholderTextColor`.
    static let textFieldPlaceholderTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldPlaceholderTextColor")
    /// Color `textFieldPrimaryIconColor`.
    static let textFieldPrimaryIconColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldPrimaryIconColor")
    /// Color `textFieldTextColor`.
    static let textFieldTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "approvedStatusColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func approvedStatusColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.approvedStatusColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cancelledStatusColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cancelledStatusColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cancelledStatusColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "destructionButtonsColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructionButtonsColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructionButtonsColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pendingStatusColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pendingStatusColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pendingStatusColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryButtonBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryButtonIconColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonIconColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonIconColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryButtonTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryButtonBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryButtonBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryButtonBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryButtonBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryButtonBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryButtonBorderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryButtonIconColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryButtonIconColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryButtonIconColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryButtonTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryButtonTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryButtonTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separatorColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textButtonTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textButtonTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textButtonTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBorderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldErrorBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldErrorBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldErrorBorderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldErrorHintColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldErrorHintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldErrorHintColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldErrorIconColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldErrorIconColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldErrorIconColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldErrorTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldErrorTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldErrorTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldHintColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldHintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldHintColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldPlaceholderTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldPlaceholderTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldPlaceholderTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldPrimaryIconColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldPrimaryIconColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldPrimaryIconColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldTextColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 19 files.
  struct file {
    /// Resource file `Cairo-Black.ttf`.
    static let cairoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Black", pathExtension: "ttf")
    /// Resource file `Cairo-Bold.ttf`.
    static let cairoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Bold", pathExtension: "ttf")
    /// Resource file `Cairo-ExtraLight.ttf`.
    static let cairoExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-ExtraLight", pathExtension: "ttf")
    /// Resource file `Cairo-Light.ttf`.
    static let cairoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Light", pathExtension: "ttf")
    /// Resource file `Cairo-Regular.ttf`.
    static let cairoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Regular", pathExtension: "ttf")
    /// Resource file `Cairo-SemiBold.ttf`.
    static let cairoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-SemiBold", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "Cairo-Black", withExtension: "ttf")`
    static func cairoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Bold", withExtension: "ttf")`
    static func cairoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-ExtraLight", withExtension: "ttf")`
    static func cairoExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Light", withExtension: "ttf")`
    static func cairoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Regular", withExtension: "ttf")`
    static func cairoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-SemiBold", withExtension: "ttf")`
    static func cairoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Cairo-Black`.
    static let cairoBlack = Rswift.FontResource(fontName: "Cairo-Black")
    /// Font `Cairo-Bold`.
    static let cairoBold = Rswift.FontResource(fontName: "Cairo-Bold")
    /// Font `Cairo-ExtraLight`.
    static let cairoExtraLight = Rswift.FontResource(fontName: "Cairo-ExtraLight")
    /// Font `Cairo-Light`.
    static let cairoLight = Rswift.FontResource(fontName: "Cairo-Light")
    /// Font `Cairo-Regular`.
    static let cairoRegular = Rswift.FontResource(fontName: "Cairo-Regular")
    /// Font `Cairo-SemiBold`.
    static let cairoSemiBold = Rswift.FontResource(fontName: "Cairo-SemiBold")
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")

    /// `UIFont(name: "Cairo-Black", size: ...)`
    static func cairoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBlack, size: size)
    }

    /// `UIFont(name: "Cairo-Bold", size: ...)`
    static func cairoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBold, size: size)
    }

    /// `UIFont(name: "Cairo-ExtraLight", size: ...)`
    static func cairoExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoExtraLight, size: size)
    }

    /// `UIFont(name: "Cairo-Light", size: ...)`
    static func cairoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoLight, size: size)
    }

    /// `UIFont(name: "Cairo-Regular", size: ...)`
    static func cairoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoRegular, size: size)
    }

    /// `UIFont(name: "Cairo-SemiBold", size: ...)`
    static func cairoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoSemiBold, size: size)
    }

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.cairoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Black' could not be loaded, is 'Cairo-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Bold' could not be loaded, is 'Cairo-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-ExtraLight' could not be loaded, is 'Cairo-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Light' could not be loaded, is 'Cairo-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Regular' could not be loaded, is 'Cairo-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-SemiBold' could not be loaded, is 'Cairo-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `icn_arrow_down`.
    static let icn_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_arrow_down")
    /// Image `icn_arrow_left`.
    static let icn_arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_arrow_left")
    /// Image `icn_arrow_right`.
    static let icn_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_arrow_right")
    /// Image `icn_arrow_up`.
    static let icn_arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_arrow_up")
    /// Image `icn_home`.
    static let icn_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_home")
    /// Image `icn_profile_user`.
    static let icn_profile_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_profile_user")
    /// Image `icn_settings`.
    static let icn_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_settings")
    /// Image `icn_sign_in_google`.
    static let icn_sign_in_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_sign_in_google")
    /// Image `icn_wallet_selected`.
    static let icn_wallet_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_wallet_selected")
    /// Image `icn_wallet_unselected`.
    static let icn_wallet_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_wallet_unselected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_arrow_down", bundle: ..., traitCollection: ...)`
    static func icn_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_arrow_left", bundle: ..., traitCollection: ...)`
    static func icn_arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_arrow_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_arrow_right", bundle: ..., traitCollection: ...)`
    static func icn_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_arrow_up", bundle: ..., traitCollection: ...)`
    static func icn_arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_arrow_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_home", bundle: ..., traitCollection: ...)`
    static func icn_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_profile_user", bundle: ..., traitCollection: ...)`
    static func icn_profile_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_profile_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_settings", bundle: ..., traitCollection: ...)`
    static func icn_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_sign_in_google", bundle: ..., traitCollection: ...)`
    static func icn_sign_in_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_sign_in_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_wallet_selected", bundle: ..., traitCollection: ...)`
    static func icn_wallet_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_wallet_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_wallet_unselected", bundle: ..., traitCollection: ...)`
    static func icn_wallet_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_wallet_unselected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizables` struct is generated, and contains static references to 13 localization keys.
    struct localizables {
      /// en translation: Category Calories: %@
      ///
      /// Locales: ar, en
      static let category_calories = Rswift.StringResource(key: "category_calories", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Category Description: %@
      ///
      /// Locales: ar, en
      static let category_description = Rswift.StringResource(key: "category_description", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Category Name: %@
      ///
      /// Locales: ar, en
      static let category_name = Rswift.StringResource(key: "category_name", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Names can't contain emojis.
      ///
      /// Locales: ar, en
      static let names_cant_contain_emojis = Rswift.StringResource(key: "names_cant_contain_emojis", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Names can't contain numbers.
      ///
      /// Locales: ar, en
      static let names_cant_contain_numbers = Rswift.StringResource(key: "names_cant_contain_numbers", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Names can't contain special characters.
      ///
      /// Locales: ar, en
      static let names_cant_contain_special_characters = Rswift.StringResource(key: "names_cant_contain_special_characters", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Oops... Something went wrong!
      ///
      /// Locales: ar, en
      static let generic_error = Rswift.StringResource(key: "generic_error", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Password is too short.
      ///
      /// Locales: ar, en
      static let password_too_short = Rswift.StringResource(key: "password_too_short", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: The %@ can't be empty.
      ///
      /// Locales: ar, en
      static let field_cant_be_empty = Rswift.StringResource(key: "field_cant_be_empty", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: This email is not valid.
      ///
      /// Locales: ar, en
      static let email_not_valid = Rswift.StringResource(key: "email_not_valid", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Your Super Secret Password.
      ///
      /// Locales: ar, en
      static let password_hint_unlocked = Rswift.StringResource(key: "password_hint_unlocked", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Your current password
      ///
      /// Locales: ar, en
      static let your_current_password = Rswift.StringResource(key: "your_current_password", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: ••••••••••••••••••••••••••
      ///
      /// Locales: ar, en
      static let password_hint_locked = Rswift.StringResource(key: "password_hint_locked", tableName: "Localizables", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)

      /// en translation: Category Calories: %@
      ///
      /// Locales: ar, en
      static func category_calories(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("category_calories", tableName: "Localizables", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "category_calories"
        }

        let format = NSLocalizedString("category_calories", tableName: "Localizables", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Category Description: %@
      ///
      /// Locales: ar, en
      static func category_description(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("category_description", tableName: "Localizables", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "category_description"
        }

        let format = NSLocalizedString("category_description", tableName: "Localizables", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Category Name: %@
      ///
      /// Locales: ar, en
      static func category_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("category_name", tableName: "Localizables", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "category_name"
        }

        let format = NSLocalizedString("category_name", tableName: "Localizables", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Names can't contain emojis.
      ///
      /// Locales: ar, en
      static func names_cant_contain_emojis(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("names_cant_contain_emojis", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "names_cant_contain_emojis"
        }

        return NSLocalizedString("names_cant_contain_emojis", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Names can't contain numbers.
      ///
      /// Locales: ar, en
      static func names_cant_contain_numbers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("names_cant_contain_numbers", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "names_cant_contain_numbers"
        }

        return NSLocalizedString("names_cant_contain_numbers", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Names can't contain special characters.
      ///
      /// Locales: ar, en
      static func names_cant_contain_special_characters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("names_cant_contain_special_characters", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "names_cant_contain_special_characters"
        }

        return NSLocalizedString("names_cant_contain_special_characters", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Oops... Something went wrong!
      ///
      /// Locales: ar, en
      static func generic_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("generic_error", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "generic_error"
        }

        return NSLocalizedString("generic_error", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Password is too short.
      ///
      /// Locales: ar, en
      static func password_too_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_too_short", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "password_too_short"
        }

        return NSLocalizedString("password_too_short", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: The %@ can't be empty.
      ///
      /// Locales: ar, en
      static func field_cant_be_empty(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("field_cant_be_empty", tableName: "Localizables", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "field_cant_be_empty"
        }

        let format = NSLocalizedString("field_cant_be_empty", tableName: "Localizables", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: This email is not valid.
      ///
      /// Locales: ar, en
      static func email_not_valid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_not_valid", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "email_not_valid"
        }

        return NSLocalizedString("email_not_valid", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Your Super Secret Password.
      ///
      /// Locales: ar, en
      static func password_hint_unlocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_hint_unlocked", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "password_hint_unlocked"
        }

        return NSLocalizedString("password_hint_unlocked", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Your current password
      ///
      /// Locales: ar, en
      static func your_current_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("your_current_password", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "your_current_password"
        }

        return NSLocalizedString("your_current_password", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: ••••••••••••••••••••••••••
      ///
      /// Locales: ar, en
      static func password_hint_locked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_hint_locked", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "password_hint_locked"
        }

        return NSLocalizedString("password_hint_locked", tableName: "Localizables", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
